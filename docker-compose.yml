x-airflow-common: &airflow-common
  image: apache/airflow:2.7.1
  environment:
    - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-airflow/${POSTGRES_DB}
    - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-airflow/${POSTGRES_DB}
    - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
    - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
    - AIRFLOW__CORE__TEST_CONNECTION='Enabled'
    - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${AIRFLOW_DAGS_PAUSED_AT_CREATION}
    - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW_LOAD_EXAMPLES}
    - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
    - AIRFLOW__LOGGING__DELETE_WORKER_LOGS_AFTER_DAYS=30
    - AIRFLOW__LOGGING__MAX_LOG_RETENTION_DAYS=30
    - AIRFLOW__LOGGING__DAG_PROCESSOR_LOG_RETENTION_DAYS=30
    - AIRFLOW__LOGGING__TASK_LOG_READER=task
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./scripts:/opt/airflow/scripts

services:
  # PostgreSQL database for storing Airflow metadata
  postgres-airflow:
    image: postgres:15
    container_name: postgres_airflow
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - airflow_metadata:/var/lib/postgresql/data
      - ./init-scripts/init-airflow-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      retries: 5
    restart: unless-stopped

  postgres-spotify:
  # Main db storing spotify data
      image: postgres:15
      container_name: postgres_spotify
      environment:
        - POSTGRES_USER=${SPOTIFY_DB_USER}
        - POSTGRES_PASSWORD=${SPOTIFY_DB_PASSWORD}
        - POSTGRES_DB=${SPOTIFY_DB}
        - POSTGRES_INITDB_ARGS="--encoding=UTF-8"
      ports:
        - "${SPOTIFY_DB_PORT}:5432"
      volumes:
        - spotify_data:/var/lib/postgresql/data
        - ./init-scripts/init-spotify-db.sql:/docker-entrypoint-initdb.d/init.sql
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
        interval: 5s
        retries: 5
      restart: unless-stopped

  # Redis for Airflow Celery executor
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  # Airflow webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    depends_on:
      - postgres-airflow
      - redis
    ports:
      - "${AIRFLOW_WEBSERVER_PORT}:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  # Airflow scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: scheduler
    restart: always

  # Airflow worker
  airflow-worker:
    <<: *airflow-common
    container_name: airflow_worker
    depends_on:
      - airflow-scheduler
    command: celery worker
    restart: always

  # Airflow initialization (runs once to set up the database and create the first user)
  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    depends_on:
      postgres-airflow:
        condition: service_healthy
      postgres-spotify:
        condition: service_healthy

    command: bash -c "airflow db migrate && 
            (airflow users list | grep -q ${AIRFLOW_USERNAME} || \
            airflow users create \
            --username ${AIRFLOW_USERNAME} \
            --password ${AIRFLOW_PASSWORD} \
            --firstname ${FIRST_NAME} \
            --lastname ${LAST_NAME} 
            --role Admin \
            --email ${AIRFLOW_EMAIL}) && /opt/airflow/scripts/init_airflow_connections.sh"
    restart: no

volumes:
  airflow_metadata:
  spotify_data:
